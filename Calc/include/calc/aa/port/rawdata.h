///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rawdata.h
/// SOFTWARE COMPONENT NAME           : RawData
/// GENERATED DATE                    : 2024-08-14 09:44:02
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_CALC_AA_RAWDATA_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_CALC_AA_RAWDATA_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "deepracer/service/rawdata/svrawdata_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace calc
{
namespace aa
{
namespace port
{
 
class RawData
{
public:
    /// @brief Constructor
    RawData();
    
    /// @brief Destructor
    ~RawData();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Subscribe event, REvent
    void SubscribeREvent();
     
    /// @brief Stop event subscription, REvent
    void StopSubscribeREvent();
     
    /// @brief Event receive handler, REvent
    void ReceiveEventREventTriggered();
     
    /// @brief Event receive handler, REvent
    void ReceiveEventREventCyclic();
     
    /// @brief Read event data, REvent
    void ReadDataREvent(ara::com::SamplePtr<deepracer::service::rawdata::proxy::events::REvent::SampleType const> samplePtr);
    
    /// @brief Subscribe field notification, RField
    void SubscribeRField();
     
    /// @brief Stop field subscription, RField
    void StopSubscribeRField();
     
    /// @brief Field notification receive handler, RField
    void ReceiveFieldRFieldTriggered();
     
    /// @brief Field notification receive handler, RField
    void ReceiveFieldRFieldCyclic();
     
    /// @brief Read field notification value, RField
    void ReadValueRField(ara::com::SamplePtr<deepracer::service::rawdata::proxy::fields::RField::FieldType const> samplePtr);
    
    /// @brief Getter method using by software component, RField
    void GetRField();
    
    /// @brief Setter method using by software component, RField
    void SetRField(const deepracer::service::rawdata::proxy::fields::RField::FieldType& value);
    
    /// @brief Request with Response method using by software component, RMethod
    void RequestRMethod(const double& a, const deepracer::type::Arithmetic& arithmetic, const double& b);

    void SetReceiveEventREventHandler(
        std::function<void(const deepracer::service::rawdata::proxy::events::REvent::SampleType&)> handler);

    void SetReceiveNotifyRFieldHandler(
        std::function<void(const deepracer::service::rawdata::proxy::fields::RField::FieldType&)> handler);

    void SetReceiveSetFieldRFieldHandler(
        std::function<void(const deepracer::service::rawdata::proxy::fields::RField::FieldType&)> handler);

    void SetReceiveGetFieldRFieldHandler(
        std::function<void(const deepracer::service::rawdata::proxy::fields::RField::FieldType&)> handler);

    void SetReceiveMethodRMethodHandler(
        std::function<void(const deepracer::service::rawdata::proxy::methods::RMethod::Output&)> handler);

private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<deepracer::service::rawdata::proxy::SvRawDataProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    /// @brief Callback for event receiver, REvent
    void RegistReceiverREvent();
    
    /// @brief Callback for field notification receiver, RField
    void RegistReceiverRField();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::shared_ptr<deepracer::service::rawdata::proxy::SvRawDataProxy> m_interface;
    
    /// @brief Find service handle
    std::shared_ptr<ara::com::FindServiceHandle> m_findHandle;


    std::function<void(const deepracer::service::rawdata::proxy::events::REvent::SampleType&)> m_receiveEventREventHandler;

    std::function<void(const deepracer::service::rawdata::proxy::fields::RField::FieldType&)> m_receiveNotifyFieldRFieldHandler;

    std::function<void(const deepracer::service::rawdata::proxy::fields::RField::FieldType&)> m_receiveSetFieldRFieldHandler;

    std::function<void(const deepracer::service::rawdata::proxy::fields::RField::FieldType&)> m_receiveGetFieldRFieldHandler;

    std::function<void(const deepracer::service::rawdata::proxy::methods::RMethod::Output&)> m_receiveMethodRMethodHandler;
};
 
} /// namespace port
} /// namespace aa
} /// namespace calc
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_CALC_AA_RAWDATA_H