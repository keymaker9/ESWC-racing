///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : sm.cpp
/// SOFTWARE COMPONENT NAME           : SM
/// GENERATED DATE                    : 2024-08-14 09:44:02
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "sm/para/sm.h"
 
namespace sm
{
namespace para
{

SM::SM()
    : m_logger(ara::log::CreateLogger("SM", "SWC", ara::log::LogLevel::kVerbose))
    , m_workers(3) // m_workers.Async에 등록가능한 함수 갯수
{
}
 
SM::~SM()
{
}

// SM Software Component의 초기화 함수.
// 설계하였던 Port 객체들을 생성한다.
// 본 예제에서는 Program Argument를 통한 제어가 필요하므로 argc 및 argv 매개변수를 추가로 지정하였다.
bool SM::Initialize(int argc, char *argv[])
{
    m_logger.LogInfo() << "SM::Initialize";
    
    bool init{true};

    // 각 Port 객체들의 생성
    // DeepRacerFG PPort 객체 생성
    m_DeepRacerFG = std::make_shared<sm::para::port::DeepRacerFG>();
    // MachineFG PPort 객체 생성
    m_MachineFG = std::make_shared<sm::para::port::MachineFG>();

    // Program Argument 를 통해 SM에서 Actuator로 실행할지 혹은 SimActuator로 실행할지를 결정하게 된다.
    ParseArgumentToState(argc, argv);

    return init;
}

// SM Software Component의 시작 함수
void SM::Start()
{
    m_logger.LogInfo() << "SM::Start";

    // 각 Port들에 대한 Start() 함수를 호출한다.
    m_DeepRacerFG->Start();
    m_MachineFG->Start();
    
    // run software component
    Run();
}

// SM이 종료되어야 할떄 호출되는 함수.
void SM::Terminate()
{
    m_logger.LogInfo() << "SM::Terminate";

    // 각 Port들에 대한 Terminate() 함수를 호출한다.
    m_DeepRacerFG->Terminate();
    m_MachineFG->Terminate();
}

// SM Software Component의 수행 함수
void SM::Run()
{
    m_logger.LogInfo() << "SM::Run";

    // 수행해야 할 작업에 대해 m_workers.Async() 호출을 통해 등록한다.
    m_workers.Async([this] { TaskChangeDeepRacerFGState(); });
    m_workers.Async([this] { m_DeepRacerFG->NotifyDeepRacerFGCyclic(); });
    m_workers.Async([this] { m_MachineFG->NotifyMachineFGCyclic(); });

    // 위의 Async로 등록된 함수들이 모두 리턴될때까지 기다린다.
    m_workers.Wait();
}

// Program argument로 지정한 stateType을 통해 DeepRacerFG 포트쪽으로 State 변경요청을 수행한다.
void SM::TaskChangeDeepRacerFGState()
{
    // DeepRacerFG 포트에서 FG를 SM에서 직접 제어하여 State를 변경하도록 한다.
    if (m_stateType == ara::sm::DeepRacerStateType::kDevice || m_stateType == ara::sm::DeepRacerStateType::kSimulation)
    {
        m_DeepRacerFG->ChangeDeepRacerFGManual(m_stateType);
    }
}

// Initialize에서 호출되는 함수로 Program argument를 통해 SM Run시에 바꿔야 할 State를 지정하여 주는 함수
void SM::ParseArgumentToState(int argc, char *argv[])
{
    if (argc >= 2)
    {
        std::string argument {argv[1]};
        std::transform(argument.begin(), argument.end(), argument.begin(), ::tolower);

        // Program Argument가 simulation으로 설정되어 있다면 Simulation State로 설정하게 된다.
        // 즉, SimActuator를 실행한다.
        if (argument == "simulation") {
            m_stateType = ara::sm::DeepRacerStateType::kSimulation;
        }
        // Program Argument가 device로 설정되어 있다면 Device State로 설정하게 된다.
        // 즉, Actuator를 실행한다.
        else if (argument == "device") {
            m_stateType = ara::sm::DeepRacerStateType::kDevice;
        }
    }
}
 
} /// namespace para
} /// namespace sm
