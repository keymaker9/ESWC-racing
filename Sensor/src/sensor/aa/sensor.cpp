///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : sensor.cpp
/// SOFTWARE COMPONENT NAME           : Sensor
/// GENERATED DATE                    : 2024-08-14 09:44:02
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <random>

#include "sensor/aa/sensor.h"
 
namespace sensor
{
namespace aa
{
 
Sensor::Sensor()
    : m_logger(ara::log::CreateLogger("SENS", "SWC", ara::log::LogLevel::kVerbose)) // Logger 객체 초기화
    , m_workers(3) // m_workers.Async에 등록가능한 함수 갯수
    , m_running(false)
{
}
 
Sensor::~Sensor()
{
}

// Sensor Software Component의 초기화 함수.
// 설계하였던 Port 객체들을 생성한다.
bool Sensor::Initialize()
{
    m_logger.LogInfo() << "Sensor::Initialize";
    
    bool init{true};

    // RawData PPort 객체의 생성
    m_RawData = std::make_shared<sensor::aa::port::RawData>();
    
    return init;
}

// Sensor Software Component의 시작 함수
void Sensor::Start()
{
    m_logger.LogInfo() << "Sensor::Start";

    // RawData PPort 의 Start() 함수를 호출한다.
    m_RawData->Start();
    
    // run software component
    Run();
}

// Sensor가 종료되어야 할때 호출되는 함수.
void Sensor::Terminate()
{
    m_logger.LogInfo() << "Sensor::Terminate";

    m_running = false;

    // RawData PPort 에 대한 Terminate() 함수를 호출한다.
    m_RawData->Terminate();
}

// Sensor Software Component의 수행 함수
void Sensor::Run()
{
    m_logger.LogInfo() << "Sensor::Run";

    m_running = true;

    // 수행해야 할 작업에 대해 m_workers.Async() 호출을 통해 등록한다.

    // 매 1초마다 REvent로 전송할 데이터를 랜덤값으로 변경
    m_workers.Async([this] { TaskGenerateREventValue(); });
    // 지정된 매 주기마다 REvent 데이터를 전송
    m_workers.Async([this] { m_RawData->SendEventREventCyclic(); });
    // 지정된 매 주기마다 RField 데이터를 Notify
    m_workers.Async([this] { m_RawData->NotifyFieldRFieldCyclic(); });

    // 위의 Async로 등록된 함수들이 모두 리턴될때까지 기다린다.
    m_workers.Wait();
}

// 매 1초마다 REvent로 전송할 데이터를 랜덤 값으로 변경하는 함수.
void Sensor::TaskGenerateREventValue()
{
    // 랜덤 디바이스의 설정.
    // Calc쪽으로 REvent 를 전송하기 위한 값을 0 ~ 255 범위의 랜덤한 값으로 세팅하기 위한 용도
    std::random_device randomDevice;
    std::default_random_engine randomEngine {randomDevice() };
    std::uniform_int_distribution<std::uint32_t> uint32Gen {0, 255};

    while (m_running)
    {
        deepracer::service::rawdata::skeleton::events::REvent::SampleType settingSampleValue = uint32Gen(randomEngine);
        // RawData 서비스의 REvent로 전송해야 할 값을 변경한다. 이 함수는 전송 타겟 값을 변경할 뿐 실제 전송은 다른 부분에서 진행된다.
        m_RawData->WriteDataREvent(settingSampleValue);

        m_logger.LogInfo() << "Sensor::Call RawData->WriteDataREvent(" << settingSampleValue << ")";

        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
} /// namespace aa
} /// namespace sensor
