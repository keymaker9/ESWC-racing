///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rawdata.h
/// SOFTWARE COMPONENT NAME           : RawData
/// GENERATED DATE                    : 2024-08-14 09:44:02
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SENSOR_AA_RAWDATA_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SENSOR_AA_RAWDATA_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "deepracer/service/rawdata/svrawdata_skeleton.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace deepracer
{
namespace service
{
namespace rawdata
{
namespace skeleton
{
 
class SvRawDataSkeletonImpl : public SvRawDataSkeleton
{
public:
    /// @brief Constructor
    SvRawDataSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent);
    
    /// @brief Request with Response method, RMethod
    ara::core::Future<SvRawDataSkeleton::RMethodOutput> RMethod(const double& a, const deepracer::type::Arithmetic& arithmetic, const double& b) override;
    
    /// @brief Getter for field, RField
    ara::core::Future<fields::RField::FieldType> GetRField();
    
    /// @brief Setter for field, RField
    ara::core::Future<fields::RField::FieldType> SetRField(const fields::RField::FieldType& value);
    
    /// @brief Notifier for field, RField
    void NotifyRField();
    
    /// @brief Update field value by software component, RField
    void UpdateRField(const fields::RField::FieldType& value);
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Field, RField
    fields::RField::FieldType m_RField;
    
};
 
} /// namespace skeleton
} /// namespace rawdata
} /// namespace service
} /// namespace deepracer

namespace sensor
{
namespace aa
{
namespace port
{
 
class RawData
{
public:
    /// @brief Constructor
    RawData();
    
    /// @brief Destructor
    ~RawData();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    /// @brief Write event data to buffer, REvent
    void WriteDataREvent(const deepracer::service::rawdata::skeleton::events::REvent::SampleType& data);
     
    /// @brief Send event cyclic from buffer data, REvent
    void SendEventREventCyclic();
     
    /// @brief Send event directly from buffer data, REvent
    void SendEventREventTriggered();
     
    /// @brief Send event directly with argument, REvent
    void SendEventREventTriggered(const deepracer::service::rawdata::skeleton::events::REvent::SampleType& data);
     
    /// @brief Write field value to buffer, RField
    void WriteValueRField(const deepracer::service::rawdata::skeleton::fields::RField::FieldType& value);
     
    /// @brief Notify field cyclic from buffer, RField
    void NotifyFieldRFieldCyclic();
     
    /// @brief Notify field directly from buffer data, RField
    void NotifyFieldRFieldTriggered();
     
    /// @brief Notify field directly with argument, RField
    void NotifyFieldRFieldTriggered(const deepracer::service::rawdata::skeleton::fields::RField::FieldType& value);
     
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Mutex for this port
    std::mutex m_mutex;
    
    /// @brief AUTOSAR Port Interface
    std::shared_ptr<deepracer::service::rawdata::skeleton::SvRawDataSkeletonImpl> m_interface;
    
    /// @brief Data for event, REvent
    deepracer::service::rawdata::skeleton::events::REvent::SampleType m_REventData;
};
 
} /// namespace port
} /// namespace aa
} /// namespace sensor
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_PPORT_SENSOR_AA_RAWDATA_H